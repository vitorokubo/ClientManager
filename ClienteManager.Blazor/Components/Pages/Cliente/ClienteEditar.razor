@page "/clientes/editar/{id:int}"
@using ClientManager.Application.DTOs
@using ClientManager.Application.Interfaces
@inject IClienteService ClienteService
@inject NavigationManager NavigationManager

<PageTitle>Editar Cliente</PageTitle>

<h3>Editar Cliente</h3>

@if (cliente == null)
{
    <p>Carregando cliente...</p>
}
else
{
    <EditForm Model="cliente" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="name" class="form-label">Nome</label>
            <InputText id="name" class="form-control" @bind-Value="cliente.Name" />
        </div>


        <button type="submit" class="btn btn-primary">Salvar</button>
        <button type="button" class="btn btn-secondary" @onclick="GoBack">Cancelar</button>
    </EditForm>
}

@code {
    [Parameter] public int Id { get; set; }
    private ClienteDTO cliente;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            cliente = await ClienteService.GetById(Id);
            if (cliente == null)
            {
                Console.WriteLine($"Cliente com ID {Id} não encontrado.");
                NavigationManager.NavigateTo("/clientes");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar cliente: {ex.Message}");
            NavigationManager.NavigateTo("/clientes");
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await ClienteService.Update(cliente);
            Console.WriteLine("Cliente atualizado com sucesso!");
            NavigationManager.NavigateTo("/clientes");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao atualizar cliente: {ex.Message}");
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/clientes");
    }
}
